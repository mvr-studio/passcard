{"version":3,"sources":["../src/index.ts","../src/components/ConnectWalletModal/index.tsx","../src/components/ConnectWalletButton/index.tsx","../src/components/WalletTile/index.tsx"],"sourcesContent":["import { createExoUi } from '@mvr-studio/exo-ui'\n\nexport const { Button, Modal, Heading, Text, Stack, Box, Switch, Label, AspectRatio, SimpleGrid, Flex, useDisclosure } =\n  createExoUi()\n\nexport { ConnectWalletModal, ConnectWalletButton, WalletTile } from './components/index'\n","import React, { useEffect } from 'react'\nimport { useCardanoWallets } from '@mvr-studio/use-dapp-connector'\nimport { Modal, Button, Heading, Stack, SimpleGrid, WalletTile, Box } from '../../'\n\ninterface ConnectWalletModalProps {\n  isOpen: boolean\n  setIsOpen: (isOpen: boolean) => void\n  onWalletChosen: (walletName: string) => void\n}\n\nexport const ConnectWalletModal = ({ isOpen, setIsOpen, onWalletChosen }: ConnectWalletModalProps) => {\n  const { fetchWallets, wallets } = useCardanoWallets()\n\n  useEffect(() => {\n    setTimeout(() => fetchWallets(), 1000)\n  }, [])\n\n  return (\n    <Modal.Root open={isOpen} onOpenChange={setIsOpen}>\n      <Modal.Portal>\n        <Modal.Overlay />\n        <Modal.Content>\n          <Stack css={{ gap: '1rem' }}>\n            <Heading size=\"lg\">Connect Wallet</Heading>\n            {wallets.length > 0 ? (\n              <SimpleGrid columns={{ '@base': 5 } as any} css={{ gap: '$sm' }}>\n                {wallets.map((wallet) => (\n                  <WalletTile\n                    key={wallet.walletName}\n                    name={wallet.name}\n                    walletName={wallet.walletName}\n                    icon={wallet.icon}\n                    onClick={onWalletChosen}\n                  />\n                ))}\n              </SimpleGrid>\n            ) : (\n              <Box>No compatible wallets found.</Box>\n            )}\n            <Modal.Close asChild css={{ position: 'absolute', top: '1rem', right: '1.5rem' }}>\n              <Button aria-label=\"Close\" size=\"sm\" scheme=\"ghost\" css={{ width: '2rem' }}>\n                ùó´\n              </Button>\n            </Modal.Close>\n          </Stack>\n        </Modal.Content>\n      </Modal.Portal>\n    </Modal.Root>\n  )\n}\n","import React from 'react'\nimport { Button, ConnectWalletModal, useDisclosure } from '../../'\n\ninterface ConnectWalletButtonProps {\n  buttonProps?: React.ComponentProps<typeof Button>\n  children?: React.ReactNode\n  onWalletChosen: (walletName: string) => void\n}\n\nexport const ConnectWalletButton = (props: ConnectWalletButtonProps) => {\n  const { isOpen, onOpen, setIsOpen } = useDisclosure()\n  return (\n    <>\n      <ConnectWalletModal isOpen={isOpen} setIsOpen={setIsOpen} onWalletChosen={props.onWalletChosen} />\n      <Button onClick={onOpen} {...props.buttonProps}>\n        {props.children || 'Connect Wallet'}\n      </Button>\n    </>\n  )\n}\n","import React from 'react'\nimport { AspectRatio, Flex, Box, Text } from '../..'\n\ntype WalletName = string\n\ninterface WalletTileProps {\n  icon: string\n  name: string\n  walletName: WalletName\n  onClick: (walletName: WalletName) => void\n}\n\nexport const WalletTile = ({ icon, name, walletName, onClick }: WalletTileProps) => {\n  return (\n    <AspectRatio ratio={1}>\n      <Flex\n        css={{\n          border: '1px solid',\n          borderColor: '$gray200',\n          cursor: 'pointer',\n          height: '100%',\n          borderRadius: '$md',\n          flexDirection: 'column',\n          justifyContent: 'center',\n          alignItems: 'center'\n        }}\n        onClick={() => onClick(walletName)}\n      >\n        <Box as=\"img\" src={icon} css={{ height: '2rem' }} />\n        <Text\n          css={{\n            textAlign: 'center',\n            textTransform: 'capitalize',\n            marginTop: '$xs',\n            fontSize: '$sm',\n            fontWeight: '$semibold'\n          }}\n        >\n          {name}\n        </Text>\n      </Flex>\n    </AspectRatio>\n  )\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA4B;;;ACA5B,mBAAiC;AACjC,gCAAkC;AAmB1B;AAVD,IAAM,qBAAqB,CAAC,EAAE,QAAQ,WAAW,eAAe,MAA+B;AACpG,QAAM,EAAE,cAAc,QAAQ,QAAI,6CAAkB;AAEpD,8BAAU,MAAM;AACd,eAAW,MAAM,aAAa,GAAG,GAAI;AAAA,EACvC,GAAG,CAAC,CAAC;AAEL,SACE,4CAAC,MAAM,MAAN,EAAW,MAAM,QAAQ,cAAc,WACtC,uDAAC,MAAM,QAAN,EACC;AAAA,gDAAC,MAAM,SAAN,EAAc;AAAA,IACf,4CAAC,MAAM,SAAN,EACC,uDAAC,SAAM,KAAK,EAAE,KAAK,OAAO,GACxB;AAAA,kDAAC,WAAQ,MAAK,MAAK,4BAAc;AAAA,MAChC,QAAQ,SAAS,IAChB,4CAAC,cAAW,SAAS,EAAE,SAAS,EAAE,GAAU,KAAK,EAAE,KAAK,MAAM,GAC3D,kBAAQ,IAAI,CAAC,WACZ;AAAA,QAAC;AAAA;AAAA,UAEC,MAAM,OAAO;AAAA,UACb,YAAY,OAAO;AAAA,UACnB,MAAM,OAAO;AAAA,UACb,SAAS;AAAA;AAAA,QAJJ,OAAO;AAAA,MAKd,CACD,GACH,IAEA,4CAAC,OAAI,0CAA4B;AAAA,MAEnC,4CAAC,MAAM,OAAN,EAAY,SAAO,MAAC,KAAK,EAAE,UAAU,YAAY,KAAK,QAAQ,OAAO,SAAS,GAC7E,sDAAC,UAAO,cAAW,SAAQ,MAAK,MAAK,QAAO,SAAQ,KAAK,EAAE,OAAO,OAAO,GAAG,uBAE5E,GACF;AAAA,OACF,GACF;AAAA,KACF,GACF;AAEJ;;;ACrCI,IAAAA,sBAAA;AAHG,IAAM,sBAAsB,CAAC,UAAoC;AACtE,QAAM,EAAE,QAAQ,QAAQ,UAAU,IAAI,cAAc;AACpD,SACE,8EACE;AAAA,iDAAC,sBAAmB,QAAgB,WAAsB,gBAAgB,MAAM,gBAAgB;AAAA,IAChG,6CAAC,uCAAO,SAAS,UAAY,MAAM,cAAlC,EACE,gBAAM,YAAY,mBACrB;AAAA,KACF;AAEJ;;;ACJM,IAAAC,sBAAA;AAHC,IAAM,aAAa,CAAC,EAAE,MAAM,MAAM,YAAY,QAAQ,MAAuB;AAClF,SACE,6CAAC,eAAY,OAAO,GAClB;AAAA,IAAC;AAAA;AAAA,MACC,KAAK;AAAA,QACH,QAAQ;AAAA,QACR,aAAa;AAAA,QACb,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,cAAc;AAAA,QACd,eAAe;AAAA,QACf,gBAAgB;AAAA,QAChB,YAAY;AAAA,MACd;AAAA,MACA,SAAS,MAAM,QAAQ,UAAU;AAAA,MAEjC;AAAA,qDAAC,OAAI,IAAG,OAAM,KAAK,MAAM,KAAK,EAAE,QAAQ,OAAO,GAAG;AAAA,QAClD;AAAA,UAAC;AAAA;AAAA,YACC,KAAK;AAAA,cACH,WAAW;AAAA,cACX,eAAe;AAAA,cACf,WAAW;AAAA,cACX,UAAU;AAAA,cACV,YAAY;AAAA,YACd;AAAA,YAEC;AAAA;AAAA,QACH;AAAA;AAAA;AAAA,EACF,GACF;AAEJ;;;AHzCO,IAAM,EAAE,QAAQ,OAAO,SAAS,MAAM,OAAO,KAAK,QAAQ,OAAO,aAAa,YAAY,MAAM,cAAc,QACnH,2BAAY;","names":["import_jsx_runtime","import_jsx_runtime"]}